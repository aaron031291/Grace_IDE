"""
Grace IDE Whitelist Server
Secure bidirectional communication bridge between IDE interface and Grace backend
"""

import asyncio
import json
import logging
import os
import re
import uuid
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Set, Optional, Any
import websockets
from websockets.server import serve
import aiofiles
import subprocess

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OperationWhitelist:
    """Manages whitelist validation for IDE operations"""
    
    def __init__(self, config_path: Optional[str] = None):
        self.config_path = config_path or "grace_ide_whitelist.json"
        self.whitelist_rules = self.load_whitelist()
        
    def load_whitelist(self) -> Dict[str, Any]:
        """Load whitelist configuration"""
        default_rules = {
            "file_operations": {
                "allowed_extensions": [".py", ".js", ".html", ".css", ".md", ".json", ".yaml", ".yml", ".txt"],
                "blocked_paths": ["../", "/etc/", "/root/", "~/.ssh/", ".env"],
                "max_file_size": 10485760,  # 10MB
                "allowed_directories": ["./", "projects/", "workspace/", "grace/"]
            },
            "grace_operations": {
                "memory_queries": ["read", "search", "list"],
                "vault_access": ["read_only"],
                "consciousness_bridge": ["status", "ping"],
                "blocked_operations": ["delete", "reset", "override"]
            },
            "terminal_operations": {
                "allowed_commands": ["ls", "pwd", "cat", "grep", "find", "git", "npm", "pip", "python"],
                "blocked_commands": ["rm", "sudo", "chmod", "chown", "passwd", "ssh", "curl", "wget"],
                "timeout": 30,
                "working_directory_only": True
            },
            "session_limits": {
                "max_concurrent_sessions": 5,
                "session_timeout": 3600,  # 1 hour
                "rate_limit": 100  # operations per minute
            }
        }
        
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r') as f:
                    loaded_rules = json.load(f)
                    # Merge with defaults
                    default_rules.update(loaded_rules)
            else:
                # Create default config file
                self.save_whitelist(default_rules)
        except Exception as e:
            logger.warning(f"Error loading whitelist config: {e}. Using defaults.")
        
        return default_rules
    
    def save_whitelist(self, rules: Dict[str, Any]):
        """Save whitelist configuration"""
        try:
            with open(self.config_path, 'w') as f:
                json.dump(rules, f, indent=2)
        except Exception as e:
            logger.error(f"Error saving whitelist config: {e}")
    
    def validate_file_operation(self, operation: str, file_path: str, content: Optional[str] = None) -> bool:
        """Validate file operation against whitelist"""
        rules = self.whitelist_rules["file_operations"]
        
        # Check file extension
        file_ext = Path(file_path).suffix.lower()
        if file_ext not in rules["allowed_extensions"]:
            logger.warning(f"Blocked file extension: {file_ext}")
            return False
        
        # Check for blocked paths
        normalized_path = os.path.normpath(file_path)
        for blocked in rules["blocked_paths"]:
            if blocked in normalized_path:
                logger.warning(f"Blocked path detected: {blocked} in {normalized_path}")
                return False
        
        # Check allowed directories
        allowed = False
        for allowed_dir in rules["allowed_directories"]:
            if normalized_path.startswith(allowed_dir):
                allowed = True
                break
        
        if not allowed:
            logger.warning(f"Path not in allowed directories: {normalized_path}")
            return False
        
        # Check file size for write operations
        if operation in ["write", "create"] and content:
            if len(content.encode('utf-8')) > rules["max_file_size"]:
                logger.warning(f"File size exceeds limit: {len(content)} bytes")
                return False
        
        return True
    
    def validate_grace_operation(self, operation: str, target: str) -> bool:
        """Validate Grace backend operation"""
        rules = self.whitelist_rules["grace_operations"]
        
        # Check if operation is blocked
        if operation in rules["blocked_operations"]:
            logger.warning(f"Blocked Grace operation: {operation}")
            return False
        
        # Validate memory queries
        if target == "memory" and operation not in rules["memory_queries"]:
            logger.warning(f"Invalid memory operation: {operation}")
            return False
        
        # Validate vault access
        if target == "vault" and operation not in rules["vault_access"]:
            logger.warning(f"Invalid vault operation: {operation}")
            return False
        
        return True
    
    def validate_terminal_operation(self, command: str) -> bool:
        """Validate terminal command"""
        rules = self.whitelist_rules["terminal_operations"]
        
        # Extract base command
        base_command = command.split()[0] if command.split() else ""
        
        # Check allowed commands
        if base_command not in rules["allowed_commands"]:
            logger.warning(f"Blocked terminal command: {base_command}")
            return False
        
        # Check for blocked commands in full command
        for blocked in rules["blocked_commands"]:
            if blocked in command:
                logger.warning(f"Blocked command pattern: {blocked}")
                return False
        
        return True

class SessionManager:
    """Manages IDE sessions and rate limiting"""
    
    def __init__(self, whitelist: OperationWhitelist):
        self.whitelist = whitelist
        self.sessions: Dict[str, Dict] = {}
        self.operation_counts: Dict[str, List[datetime]] = {}
    
    def create_session(self, websocket) -> str:
        """Create new session"""
        session_id = str(uuid.uuid4())
        self.sessions[session_id] = {
            "id": session_id,
            "websocket": websocket,
            "created_at": datetime.now(),
            "last_activity": datetime.now(),
            "operation_count": 0
        }
        self.operation_counts[session_id] = []
        logger.info(f"Created session: {session_id}")
        return session_id
    
    def validate_session(self, session_id: str) -> bool:
        """Validate session exists and hasn't expired"""
        if session_id not in self.sessions:
            return False
        
        session = self.sessions[session_id]
        timeout = self.whitelist.whitelist_rules["session_limits"]["session_timeout"]
        
        if (datetime.now() - session["last_activity"]).seconds > timeout:
            self.remove_session(session_id)
            return False
        
        return True
    
    def check_rate_limit(self, session_id: str) -> bool:
        """Check if session is within rate limits"""
        if session_id not in self.operation_counts:
            return False
        
        now = datetime.now()
        minute_ago = now - timedelta(minutes=1)
        
        # Clean old operations
        self.operation_counts[session_id] = [
            op_time for op_time in self.operation_counts[session_id] 
            if op_time > minute_ago
        ]
        
        rate_limit = self.whitelist.whitelist_rules["session_limits"]["rate_limit"]
        return len(self.operation_counts[session_id]) < rate_limit
    
    def record_operation(self, session_id: str):
        """Record operation for rate limiting"""
        if session_id in self.operation_counts:
            self.operation_counts[session_id].append(datetime.now())
        
        if session_id in self.sessions:
            self.sessions[session_id]["last_activity"] = datetime.now()
            self.sessions[session_id]["operation_count"] += 1
    
    def remove_session(self, session_id: str):
        """Remove session"""
        if session_id in self.sessions:
            del self.sessions[session_id]
        if session_id in self.operation_counts:
            del self.operation_counts[session_id]
        logger.info(f"Removed session: {session_id}")
    
    def cleanup_expired_sessions(self):
        """Remove expired sessions"""
        now = datetime.now()
        timeout = self.whitelist.whitelist_rules["session_limits"]["session_timeout"]
        
        expired = [
            session_id for session_id, session in self.sessions.items()
            if (now - session["last_activity"]).seconds > timeout
        ]
        
        for session_id in expired:
            self.remove_session(session_id)

class GraceConnector:
    """Handles communication with Grace backend"""
    
    def __init__(self):
        self.grace_available = self.check_grace_availability()
    
    def check_grace_availability(self) -> bool:
        """Check if Grace backend is available"""
        # TODO: Implement actual Grace connectivity check
        # For now, return True to allow development
        return True
    
    async def send_to_grace(self, operation: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Send operation to Grace backend"""
        if not self.grace_available:
            return {"error": "Grace backend not available", "status": "error"}
        
        # TODO: Implement actual Grace communication
        # This is a placeholder for Grace integration
        
        if operation == "memory_query":
            return {"result": "Memory query result placeholder", "status": "success"}
        elif operation == "consciousness_ping":
            return {"result": "Grace consciousness active", "status": "success"}
        elif operation == "vault_read":
            return {"result": "Vault data placeholder", "status": "success"}
        else:
            return {"error": f"Unknown operation: {operation}", "status": "error"}

class GraceIDEServer:
    """Main server class for Grace IDE"""
    
    def __init__(self, host: str = "localhost", port: int = 8765):
        self.host = host
        self.port = port
        self.whitelist = OperationWhitelist()
        self.session_manager = SessionManager(self.whitelist)
        self.grace_connector = GraceConnector()
        
    async def handle_websocket(self, websocket, path):
        """Handle WebSocket connections"""
        session_id = self.session_manager.create_session(websocket)
        
        try:
            await websocket.send(json.dumps({
                "type": "connection_established",
                "session_id": session_id,
                "status": "connected"
            }))
            
            async for message in websocket:
                await self.process_message(session_id, message, websocket)
                
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"WebSocket connection closed for session: {session_id}")
        except Exception as e:
            logger.error(f"Error in WebSocket handler: {e}")
        finally:
            self.session_manager.remove_session(session_id)
    
    async def process_message(self, session_id: str, message: str, websocket):
        """Process incoming message from IDE interface"""
        try:
            data = json.loads(message)
            
            # Validate session
            if not self.session_manager.validate_session(session_id):
                await websocket.send(json.dumps({
                    "error": "Invalid session",
                    "status": "error"
                }))
                return
            
            # Check rate limit
            if not self.session_manager.check_rate_limit(session_id):
                await websocket.send(json.dumps({
                    "error": "Rate limit exceeded",
                    "status": "error"
                }))
                return
            
            # Record operation
            self.session_manager.record_operation(session_id)
            
            # Route operation
            result = await self.route_operation(data)
            await websocket.send(json.dumps(result))
            
        except json.JSONDecodeError:
            await websocket.send(json.dumps({
                "error": "Invalid JSON",
                "status": "error"
            }))
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await websocket.send(json.dumps({
                "error": "Internal server error",
                "status": "error"
            }))
    
    async def route_operation(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Route operation based on type"""
        operation_type = data.get("type")
        
        if operation_type == "file_operation":
            return await self.handle_file_operation(data)
        elif operation_type == "grace_operation":
            return await self.handle_grace_operation(data)
        elif operation_type == "terminal_operation":
            return await self.handle_terminal_operation(data)
        else:
            return {"error": f"Unknown operation type: {operation_type}", "status": "error"}
    
    async def handle_file_operation(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Handle file operations"""
        operation = data.get("operation")
        file_path = data.get("file_path")
        content = data.get("content")
        
        # Validate operation
        if not self.whitelist.validate_file_operation(operation, file_path, content):
            return {"error": "File operation not allowed", "status": "error"}
        
        try:
            if operation == "read":
                async with aiofiles.open(file_path, 'r') as f:
                    file_content = await f.read()
                return {"result": file_content, "status": "success"}
            
            elif operation == "write":
                async with aiofiles.open(file_path, 'w') as f:
                    await f.write(content)
                return {"result": "File written successfully", "status": "success"}
            
            elif operation == "list":
                path_obj = Path(file_path)
                if path_obj.is_dir():
                    files = [str(p) for p in path_obj.iterdir()]
                    return {"result": files, "status": "success"}
                else:
                    return {"error": "Path is not a directory", "status": "error"}
            
            else:
                return {"error": f"Unknown file operation: {operation}", "status": "error"}
                
        except Exception as e:
            return {"error": f"File operation failed: {str(e)}", "status": "error"}
    
    async def handle_grace_operation(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Handle Grace backend operations"""
        operation = data.get("operation")
        target = data.get("target")
        
        # Validate operation
        if not self.whitelist.validate_grace_operation(operation, target):
            return {"error": "Grace operation not allowed", "status": "error"}
        
        # Forward to Grace connector
        return await self.grace_connector.send_to_grace(operation, data)
    
    async def handle_terminal_operation(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Handle terminal operations"""
        command = data.get("command")
        
        # Validate command
        if not self.whitelist.validate_terminal_operation(command):
            return {"error": "Terminal command not allowed", "status": "error"}
        
        try:
            # Execute command with timeout
            timeout = self.whitelist.whitelist_rules["terminal_operations"]["timeout"]
            result = subprocess.run(
                command.split(),
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=os.getcwd()
            )
            
            return {
                "result": {
                    "stdout": result.stdout,
                    "stderr": result.stderr,
                    "returncode": result.returncode
                },
                "status": "success"
            }
            
        except subprocess.TimeoutExpired:
            return {"error": "Command timed out", "status": "error"}
        except Exception as e:
            return {"error": f"Command execution failed: {str(e)}", "status": "error"}
    
    async def start_server(self):
        """Start the WebSocket server"""
        logger.info(f"Starting Grace IDE Server on {self.host}:{self.port}")
        
        # Start cleanup task
        asyncio.create_task(self.cleanup_task())
        
        # Start WebSocket server
        async with serve(self.handle_websocket, self.host, self.port):
            logger.info("Grace IDE Server is running...")
            await asyncio.Future()  # Run forever
    
    async def cleanup_task(self):
        """Periodic cleanup of expired sessions"""
        while True:
            await asyncio.sleep(300)  # Run every 5 minutes
            self.session_manager.cleanup_expired_sessions()

# Entry point
async def main():
    server = GraceIDEServer()
    await server.start_server()

if __name__ == "__main__":
    asyncio.run(main())